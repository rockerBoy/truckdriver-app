version: '3.7'
services:
    nginx:
        image: nginx:1.21-alpine
        container_name: rusnipizda-proxy
        ports:
            - '8080:80'
            - '443:443'
        volumes:
            - ./truckdriver_laravel:/var/www/html/
            - ./truckdriver_vue:/var/www/app/
            - ./logs/nginx:/var/log/nginx/
            - ./docker/nginx/conf.d:/etc/nginx/conf.d
            - ./docker/nginx/ssl:/etc/nginx/ssl
            - ./docker/nginx/.htpasswd:/etc/nginx/.htpasswd
        restart: always
        networks:
            - truckdriver
        extra_hosts:
            - 'api.truckdriver.loc:host-gateway'
            - 'truckdriver.loc:host-gateway'
        environment:
            - DEFAULT_HOSTNAME=${DEFAULT_HOSTNAME}
        depends_on: ['php-fpm', 'ui']
    php-fpm:
        build:
            target: php
            context: ./docker/php
            args:
                APP_USER: ${APP_USER}
        container_name: rusnipizda-php
        working_dir: /var/www/html
        restart: ${DOCKER_RESTART_POLICY}
        volumes:
            - ./truckdriver_laravel/:/var/www/html/
            - ./logs/php.log:/var/log/fpm-php.www.log
            - ./logs/supervisord:/var/log/supervisor/
        networks:
            - truckdriver
        extra_hosts:
            - 'host.docker.internal:host-gateway'
            - 'api.truckdriver.loc:host-gateway'
            - 'rusnipizda.truckdriver.loc:host-gateway'
        depends_on: ['redis', 'postgres', 'redis-web', 'mailhog']
    ui:
        build:
            target: frontend
            context: ./docker/php
        container_name: rusnipizda-ui
        working_dir: /var/www/html
        restart: ${DOCKER_RESTART_POLICY}
        command: npm run host
        ports:
            - "5173:5173"
        volumes:
            - ./truckdriver_vue/:/var/www/html/
        networks:
            - truckdriver
    redis:
        image: redis:latest
        env_file: .env
        restart: always
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - ./data/redis:/data
        networks:
            - truckdriver
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            retries: 3
            timeout: 5s
        command: ["redis-server", '--appendonly', 'yes', '--requirepass', "${REDIS_PASSWORD}"]
        expose:
            -   "3679"
    redis-web:
        image: rediscommander/redis-commander
        env_file: .env
        environment:
            PORT: "8081"
            REDIS_HOST: redis
            REDIS_DB: "${REDIS_DB}"
            REDIS_PASSWORD: "${REDIS_PASSWORD}"
            NODE_TLS_REJECT_UNAUTHORIZED: "0"
        ports:
            - "${REDIS_WEB_PORT:-8085}:8081"
        logging:
            driver: none
        depends_on:
            - redis
        networks:
            - truckdriver
    postgres:
        image: 'postgres:14'
        env_file: .env
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            POSTGRES_DB: "${DB_DATABASE}"
            POSTGRES_USER: "root"
            POSTGRES_PASSWORD: "root"
        volumes:
            - './data/postgresql/:/var/lib/postgresql/data'
        networks:
            - truckdriver
        healthcheck:
            test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]
            retries: 3
            timeout: 5s
    # Other Services here ... depending on our own setup
    elasticsearch:
        container_name: elastic
        image: 'elasticsearch:8.6.0'
        environment:
            - discovery.type=single-node
        ports:
            - '9200:9200'
        volumes:
            - './data/elasticsearch/:/usr/share/elasticsearch/data'
        networks:
            - truckdriver
        depends_on:
            - php-fpm
    kibana:
        image: 'kibana:8.6.0'
        restart: ${DOCKER_RESTART_POLICY}
        environment:
            - elasticsearch.hosts=https://elastic:9200
        ports:
            - '5601:5601'
        networks:
            - truckdriver
        depends_on:
            - elasticsearch
    mailhog:
        image: 'mailhog/mailhog:latest'
        ports:
            - '${FORWARD_MAILHOG_PORT:-1025}:1025'
            - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'
        networks:
            - truckdriver
    logstash:
        image: 'logstash:8.6.0'
        volumes:
            - ./data/logstash/:/logstash_dir/
        command:
            -   logstash -f /logstash_dir/logstash.conf
        ports:
            - '9600:9600'
        depends_on:
            - elasticsearch
        networks:
            - truckdriver
networks:
   truckdriver:
       driver: bridge
       driver_opts:
           com.docker.network.enable_ipv6: "false"
       ipam:
           driver: default
           config:
               - subnet: 172.11.0.0/16
